#!/bin/sh

set -e

if [ -n "$DGMO_BIN_PATH" ]; then
    resolved="$DGMO_BIN_PATH"
else
    # Get the real path of this script, resolving any symlinks
    script_path="$0"
    while [ -L "$script_path" ]; do
        link_target="$(readlink "$script_path")"
        case "$link_target" in
            /*) script_path="$link_target" ;;
            *) script_path="$(dirname "$script_path")/$link_target" ;;
        esac
    done
    script_dir="$(dirname "$script_path")"
    script_dir="$(cd "$script_dir" && pwd)"
    
    # Find the project root (where packages directory is)
    project_root="$script_dir"
    while [ "$project_root" != "/" ]; do
        if [ -d "$project_root/packages/tui" ]; then
            break
        fi
        project_root="$(dirname "$project_root")"
    done
    
    if [ "$project_root" = "/" ]; then
        echo "Error: Could not find project root directory" >&2
        exit 1
    fi
    
    # Map platform names
    case "$(uname -s)" in
        Darwin) platform="darwin" ;;
        Linux) platform="linux" ;;
        MINGW*|CYGWIN*|MSYS*) platform="win32" ;;
        *) platform="$(uname -s | tr '[:upper:]' '[:lower:]')" ;;
    esac
    
    # Set binary name based on platform
    binary="dgmo"
    [ "$platform" = "win32" ] && binary="dgmo.exe"
    
    # Look for the TUI binary in the packages/tui directory
    resolved="$project_root/packages/tui/$binary"
    
    if [ ! -f "$resolved" ]; then
        # Try the root directory as fallback
        resolved="$project_root/$binary"
        
        if [ ! -f "$resolved" ]; then
            echo "Error: DGMO TUI binary not found" >&2
            echo "Please build the TUI first by running:" >&2
            echo "  cd $project_root/packages/tui && go build -o $binary cmd/dgmo/main.go" >&2
            exit 1
        fi
    fi
fi

# Handle SIGINT gracefully
trap '' INT

# Execute the binary with all arguments
exec "$resolved" "$@"
